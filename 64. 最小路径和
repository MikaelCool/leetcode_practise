题目：
给定一个包含非负整数的 m x n 网格 grid ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
说明：每次只能向下或者向右移动一步。

示例 1：
输入：grid = [[1,3,1],[1,5,1],[4,2,1]]
输出：7
解释：因为路径 1→3→1→1→1 的总和最小。

示例 2：
输入：grid = [[1,2,3],[4,5,6]]
输出：12
 
提示：
m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 100

代码：
class Solution {
public:
    int min(int a, int b) {
        return a <= b ? a : b;
    }
    int minPathSum(vector<vector<int>>& grid) {
        vector<vector<int>> f(grid.size(), vector<int>(grid[0].size()));
        for (int i = 0; i < grid.size(); i++)
        {
            for (int j = 0; j < grid[0].size(); j++)
            {
                if (i == 0 || j == 0) {
                    if (i == 0 && j > 0) f[i][j] = f[i][j - 1] + grid[i][j];
                    if (i > 0 && j == 0) f[i][j] = f[i - 1][j] + grid[i][j];
                    if (i == 0 && j == 0) f[i][j] = grid[i][j];
                } else {
                    f[i][j] = min(f[i - 1][j], f[i][j - 1]) + grid[i][j];
                }
            }
        }
        return f[grid.size() - 1][grid[0].size() - 1];
    }
};
