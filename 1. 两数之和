题目:
给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值 target 的那两个整数，并返回它们的数组下标。
你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
你可以按任意顺序返回答案。

示例 1：
输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。

示例 2：
输入：nums = [3,2,4], target = 6
输出：[1,2]

示例 3：
输入：nums = [3,3], target = 6
输出：[0,1]
 
提示：
2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
只会存在一个有效答案

进阶：你可以想出一个时间复杂度小于 O(n2) 的算法吗？

代码:
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
typedef struct Hash * PtrH;
struct Hash {
    int val;
    int key;
    UT_hash_handle hh;
};
PtrH hash;

PtrH find(int key)
{
    PtrH temp;
    HASH_FIND_INT(hash, &key, temp);
    return temp;
}

void insert(int key, int val)
{
    PtrH judge = find(key);
    if (judge == NULL)
    {
        PtrH temp = (PtrH *) malloc(sizeof(struct Hash));
        temp->key = key;
        temp->val = val;
        HASH_ADD_INT(hash, key, temp);
    }
    else {
        judge->val = val;
    } 
}

int* twoSum(int* nums, int numsSize, int target, int* returnSize){
    int * results = NULL;//The returned array
    hash = NULL;//hashTable
    PtrH temp;
    int i;//loop var

    for (i = 0; i < numsSize; i++)
    {
        temp = find(target - nums[i]);
        if (temp != NULL)
        {
            results = (int *) malloc(sizeof(int)*2);
            results[0] = i;
            results[1] = temp->val;
            * returnSize = 2;
            return results;
        }
        insert(nums[i], i);
    }

    * returnSize = 0;
    return results;
}
