题目：
给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照 逆序的方式存储的，并且每个节点只能存储一位数字。
请你将两个数相加，并以相同形式返回一个表示和的链表。
你可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例1:
输入：l1 = [2,4,3], l2 = [5,6,4]
输出：[7,0,8]
解释：342 + 465 = 807。

示例 2：
输入：l1 = [0], l2 = [0]
输出：[0]

示例 3：
输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
输出：[8,9,9,9,0,0,0,1]
 
提示：
每个链表中的节点数在范围 [1, 100] 内
0 <= Node.val <= 9
题目数据保证列表表示的数字不含前导零


代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2){
    //定义:和的链表
    struct ListNode* lSum;
    //定义：头节点
    struct ListNode* head;
    //定义:中间变量
    struct ListNode* tmp;
    //定义:进位标志(初始化置0),和
    int flag=0,sum;

    //分配空间
    lSum = (struct ListNode*) malloc(sizeof(struct ListNode));
    //初始化
    lSum->next = NULL;
    //保存头节点
    head = lSum;

    //求和
    while (l1 || l2)
    {
        //分配空间
        tmp = (struct ListNode*) malloc(sizeof(struct ListNode));
        //初始化
        tmp->next = NULL;
        //将和指向下一位    
        lSum->next = tmp;
        lSum = lSum->next;

        //进位求和
        if(l1 && l2) 
        {
            sum = l1->val + l2->val + flag;
            if(sum > 9)
            {
                sum %= 10;
                flag = 1;
            }
            else flag = 0;
            lSum->val = sum;
        }
        if(l1 && !l2)
        {
            sum = l1->val + flag;
            if(sum > 9)
            {
                sum %= 10;
                flag = 1;
            }
            else flag = 0;
            lSum->val = sum;
        }
        if(!l1 && l2)
        {
            sum = l2->val + flag;
            if(sum > 9)
            {
                sum %= 10;
                flag = 1;
            }
            else flag = 0;
            lSum->val = sum;
        }

        //l1,l2分别指向下一位
         if (l1) l1 = l1->next;
         if (l2) l2 = l2->next;
    }

    //如果还存在进位
    if (flag)
    {
        //分配空间
        tmp = (struct ListNode*) malloc(sizeof(struct ListNode));
        //初始化
        tmp->next = NULL;
        //将和指向下一位    
        lSum->next = tmp;
        lSum = lSum->next;
        //赋值
        lSum->val = flag;
    }

    //重新指向头节点
    lSum = head->next;

    return lSum;
}
